<?php
/**
 * @file
 * Code for the dosomething_organ_donation feature.
 */

define('ORGANIZE_API_URL', variable_get('dosomething_organize_url', 'https://fiftythree-dev.organize.org/api'));
define('ORGANIZE_API_VERSION', variable_get('dosomething_organize_api_version', 'v4'));
define('ORGANIZE_API_AUTH_TOKEN', variable_get('dosomething_organize_auth_token', ''));


/*
 * Implements hook_menu()
 *
 */
function dosomething_organ_donation_menu() {
  $items = [];

  $items['organ-donation/registration'] = [
    'page callback' => 'dosomething_organ_donation_store_registration',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  ];

  $items['organize/registration'] = [
    'page callback' => 'dosomething_organ_donation_post_registration',
    'access callback' => 'user_access',
    'access arguments' => array('administer modules'),
    'type' => MENU_CALLBACK,
  ];

  $items['organize/postal-code'] = [
    'page callback' => 'dosomething_organ_donation_send_postal_code',
    'access callback' => 'user_access',
    'access arguments' => array('administer modules'),
    'type' => MENU_CALLBACK,
  ];

   $items['admin/config/services/organs'] = [
    'title' => 'Organize API Settings',
    'description' => 'Manage Organize connection settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_organize_config_form'),
    'access arguments' => array('administer modules'),
    'file' => 'dosomething_organ_donation.admin.inc',
  ];

  // Return the $items array to register the path
  return $items;
}

/**
 * Build the drupal_http_request object for Organize calls.
 * @returns array
 */
function _dosomething_organ_donation_build_http_client() {
  $base_url = ORGANIZE_API_URL;
  $token = 'Token ' . ORGANIZE_API_AUTH_TOKEN;

  $client = [
    'base_url' => $base_url,
    'headers' => [
      'Authorization' => $token,
      'Content-Type' => 'application/json',
    ],
  ];

  return $client;
}

/**
 * POST user's information to Organize's Registration API endpoint.
 *
 * @param array $values
 *   Values from the registration form.
 */
function dosomething_organ_donation_post_registration($values) {
  $client = _dosomething_organ_donation_build_http_client();
  $values['source'] = 'www.dosomething.org';

  $options = [
    'method' => 'POST',
    'headers' => $client['headers'],
    'data' =>
      json_encode($values),
];

  $response = drupal_http_request($client['base_url'] . '/v2/registrations/', $options);

  return drupal_json_output(json_decode($response->data));
}

/*
 * Sends user postal code to Organize's PostalCode GET API endpoint.
 *
 */
function dosomething_organ_donation_send_postal_code() {
  $params = drupal_get_query_parameters();

  $client = _dosomething_organ_donation_build_http_client();

  $response = drupal_http_request($client['base_url'] . '/v4/postal-codes/' . $params['postal_code'] . '/', [
    'headers' => $client['headers'],
    'method' => 'GET',
  ]);

  if ($response->code === '500') {
    $response = [
      'error' => $response->status_message,
    ];

    return drupal_json_output($response);
  }
  // Only return the data.
  return drupal_json_output(json_decode($response->data));

}


/*
 * Stores meta data about the organ registration in the dosomething_organ_donation table.
 *
 */
function dosomething_organ_donation_store_registration() {
  $params = drupal_get_query_parameters();

  try {
    if ($params['sid'] && $params['uid']) {
      db_insert('dosomething_organ_donation')
        ->fields([
          'sid' => $params['sid'],
          'uid' => $params['uid'],
          'registration_form_timestamp' =>  REQUEST_TIME,
      ])->execute();

      $response = [
        'status' => 'registration data stored',
      ];
    } else {
      $response = [
        'status' => 'Required parameters not found.',
      ];

      watchdog('dosomething_organ_donation', $response, NULL, WATCHDOG_ERROR);
    }

    return drupal_json_output($response);
  }
  catch (Exception $e) {
    return drupal_json_output($e);

    watchdog('dosomething_organ_donation', $e, NULL, WATCHDOG_ERROR);
  }

  return;
}

/*
 * Organ donation configuration form. Allows admins to turn on/off the
 * organ donation modal after signup.
 *
 */
function dosomething_organ_donation_config_form($form, &$form_state, $node) {
  // Load the node's helpers variables.
  $vars = dosomething_helpers_get_variables('node', $node->nid);

  $form['nid'] = [
    '#type' => 'hidden',
    '#value' => $node->nid,
  ];

  $form['organ_donation'] = [
    '#type' => 'fieldset',
    '#title' => t("Organ Donation"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];

  $form['organ_donation']['register_organ_donors'] = [
    '#type' => 'checkbox',
    '#title' => t('Register organ donors after signup.'),
    '#description' => t('If set, after a user signs up for the campaign they will be presented with a modal to register as an organ donor'),
    '#default_value' => $vars['register_organ_donors'],
    '#size' => 20,
  ];

  $form['organ_donation']['actions'] = [
    '#type' => 'actions',
    'submit' => [
      '#type' => 'submit',
      '#value' => 'Save',
    ],
  ];

  return $form;
}

/**
 * Submit callback for dosomething_campaign_organ_donation_config_form().
 */
function dosomething_organ_donation_config_form_submit(&$form, &$form_state) {
  $var_name = 'register_organ_donors';

  $values = $form_state['values'];

  dosomething_helpers_set_variable('node', $values['nid'], $var_name, $values[$var_name]);

  drupal_set_message("Updated.");
}

/**
 * Checks if the user has already registered.
 *
 * @param object $node
 * @return bool
 */
function dosomething_organ_donation_has_registered($node) {
  $organ_registration_turned_on = dosomething_helpers_get_variable('node', $node->nid, 'register_organ_donors');

  $sid = dosomething_signup_exists($node->nid);
  $result = db_select('dosomething_organ_donation', 'od')->fields('od',['registration_form_timestamp'])->condition('sid', $sid, '=')->execute();
  $result = $result->fetchAll();

  return ($organ_registration_turned_on && count($result) === 0) ? FALSE : TRUE;
}
