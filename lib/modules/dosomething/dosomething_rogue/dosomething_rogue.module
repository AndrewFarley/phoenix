<?php

/**
 * @file
 * Code for the dosomething_rogue feature.
 */

include_once('dosomething_rogue.admin.inc');
include_once('dosomething_rogue.cron.inc');
include_once('includes/Rogue.php');

define('ROGUE_API_URL', variable_get('dosomething_rogue_url', 'http://rogue.app/api'));
define('ROGUE_API_VERSION', variable_get('dosomething_rogue_api_version', 'v1'));
define('ROGUE_API_KEY', variable_get('dosomething_rogue_api_key', ''));

/*
 * Implements hook_menu()
 *
 */
function dosomething_rogue_menu() {
  $items = [];

  $items['admin/config/services/rogue'] = [
    'title' => 'Rogue API Settings',
    'description' => 'Manage Rogue connection settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_rogue_config_form'),
    'access arguments' => array('administer modules'),
    'file' => 'dosomething_rogue.admin.inc',
  ];

  // Return the $items array to register the path
  return $items;
}

/**
 * Build the Guzzle HTTP Client to make requests to Rogue.
 *
 * https://github.com/DoSomething/rogue
 */
function dosomething_rogue_client() {

  return new Rogue(ROGUE_API_URL . '/' . ROGUE_API_VERSION . '/');
}

/**
 * Sends a reportback to Rogue.
 *
 * @param array $values
 *   Values to send to Rogue.
 */
function dosomething_rogue_send_reportback_to_rogue($values, $user = NULL) {
  if (!isset($user)) {
    global $user;
  }

  $northstar_id = dosomething_user_get_field('field_northstar_id', $user);

  $run = dosomething_helpers_get_current_campaign_run_for_user($values['nid']);

  $client = dosomething_rogue_client();

  $data = [
        'northstar_id' => $northstar_id ? $northstar_id : NULL,
        'drupal_id' => $user->uid,
        'campaign_id' => $values['nid'],
        'campaign_run_id' => $run->nid,
        'quantity' => $values['quantity'],
        'why_participated' => $values['why_participated'],
        'file' => isset($values['file']) ? $values['file'] : NULL,
        'caption' => isset($values['caption']) ? $values['caption'] : NULL,
        'status' => isset($values['status']) ? $values['status'] : 'pending',
        'crop_x' => $values['crop_x'],
        'crop_y' => $values['crop_y'],
        'crop_width' => $values['crop_width'],
        'crop_height' => $values['crop_height'],
        'crop_rotate' => $values['crop_rotate'],
  ];

  $response = $client->postReportback($data);

  if (in_array($response->code, [200, 201]) && module_exists('stathat')) {
    stathat_send_ez_count('drupal - Rogue - reportback sent - count', 1);
  }
  else {
    // Log as watchdog error, and stathat value.
    if (module_exists('stathat')) {
      stathat_send_ez_count('drupal - Rogue - reportback failed - count', 1);
    }
    // Save fail to a db log so we can easily export.
    db_insert('dosomething_rogue_failed_task_log')
      ->fields([
        'drupal_id' => $user->uid,
        'campaign_id' => $values['nid'],
        'campaign_run_id' => $run->nid,
        'quantity' => $values['quantity'],
        'why_participated' => $values['why_participated'],
        'file' => isset($values['file']) ? $values['file'] : NULL,
        'caption' => isset($values['caption']) ? $values['caption'] : NULL,
        'timestamp' => REQUEST_TIME,
        'response_code' => $response->code,
        'response_values' => json_encode($response),
      ])
      ->execute();

      watchdog('dosomething_rogue', 'reportback not migrated to Rogue', ['user' => $user->uid, 'campaign_id' => $values['nid'], 'campaign_run_id' => $run->nid], WATCHDOG_ERROR);
  }

  return drupal_json_decode($response->data);
}

/**
 * Sends updated reportback item(s) to Rogue.
 *
 * @param array $data
 * Values to send to Rogue.
 *
 */
function dosomething_rogue_update_rogue_reportback_items($data)
{
  $client = dosomething_rogue_client();

  $response = $client->updateReportback($data);

  //@TODO - Add error handling.

  return $response;
}

/**
 * Query to find Rogue reportbak item id by Phoenix fid.
 *
 * @param string $fid
 * Phoenix fid of reportback item.
 *
 */
function dosomething_rogue_get_by_file_id($fid)
{
  return db_query("SELECT rogue_rbs.rogue_item_id FROM {dosomething_rogue_reportbacks} rogue_rbs WHERE fid = :fid", array(':fid' => $fid))->fetchAll();
}

/**
 * Insert record that stores reference to the most recent uploaded reportback item in
 * phoenix and it's corresponding id's in Rogue
 *
 * @param string $rbid
 * @param string $fid
 * @param object $rogue_reportback
 *
 * @return InsertQuery object
 */
function dosomething_rogue_store_rogue_references($rbid, $fid, $rogue_reportback)
{
  $most_recent_rogue_item = array_pop($rogue_reportback['data']['reportback_items']['data']);

  // Store references to rogue IDs.
  return db_insert('dosomething_rogue_reportbacks')
    ->fields(array(
      'fid' => $fid,
      'rogue_item_id' => $most_recent_rogue_item['id'],
      'rbid' => $rbid,
      'rogue_reportback_id' => $rogue_reportback['data']['id'],
      'created_at' => REQUEST_TIME,
      ))
    ->execute();
}
