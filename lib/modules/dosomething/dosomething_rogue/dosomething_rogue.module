<?php

/**
 * @file
 * Code for the dosomething_rogue feature.
 */

include_once('dosomething_rogue.admin.inc');
include_once('dosomething_rogue.cron.inc');
include_once('includes/Rogue.php');

define('ROGUE_API_URL', variable_get('dosomething_rogue_url', 'http://rogue.app/api'));
define('ROGUE_API_VERSION', variable_get('dosomething_rogue_api_version', 'v1'));
define('ROGUE_API_KEY', variable_get('dosomething_rogue_api_key', 'abc123'));

/*
 * Implements hook_menu()
 *
 */
function dosomething_rogue_menu() {
  $items = [];

  $items['admin/config/services/rogue'] = [
    'title' => 'Rogue API Settings',
    'description' => 'Manage Rogue connection settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_rogue_config_form'),
    'access arguments' => array('administer modules'),
    'file' => 'dosomething_rogue.admin.inc',
  ];

  // Return the $items array to register the path
  return $items;
}

/**
 * Build the Guzzle HTTP Client to make requests to Rogue.
 *
 * https://github.com/DoSomething/rogue
 */
function dosomething_rogue_client() {
  return new Rogue(ROGUE_API_URL . '/' . ROGUE_API_VERSION . '/',
    ['headers' => ['X-DS-Rogue-API-Key' => ROGUE_API_KEY]]
  );
}

/**
 * Sends a reportback to Rogue.
 *
 * @param array $values
 *    Values to send to Rogue.
 * @param object $user
 *    Drupal user object of user that reported back.
 * @param int $failed_task_id
 *    Index of failed reportback item if it exists in the dosomething_rogue_failed_task_log.
 */
function dosomething_rogue_send_reportback_to_rogue($values, $user = NULL, $failed_task_id = NULL) {
  if (!isset($user)) {
    global $user;
  }

  $northstar_id = dosomething_user_get_field('field_northstar_id', $user);

  // Band-aid fix for an issue we are seeing with phoenix not being
  // aware of a user's northstar id. If it doesn't find one, we just grab it
  // from northstar directly.
  if (!$northstar_id) {
    if ($user->uid) {
      $northstar_user = dosomething_northstar_get_user($user->uid, 'drupal_id');
    } else {
      $northstar_user = dosomething_northstar_get_user($values['northstar_id']);
      $user = user_load($northstar_user->drupal_id);
    }
    $northstar_id = $northstar_user->id;
  }

  $run = dosomething_helpers_get_current_campaign_run_for_user($values['nid']);
  $client = dosomething_rogue_client();

  $data = dosomething_rogue_transform_reportback($values, $user, $northstar_id);
  $data['type'] = 'reportback';

  try {
    $response = $client->postReportback($data);

    if (module_exists('stathat')) {
      stathat_send_ez_count('drupal - Rogue - reportback sent - count', 1);
    }
    if (!$response) {
      // This is a 404
      dosomething_rogue_handle_failure($data, $response, $failed_task_id, $user);
    }
  }
  catch (GuzzleHttp\Exception\ServerException $e) {
    // These aren't yet caught by Gateway
    dosomething_rogue_handle_failure($data, $response, $failed_task_id, $user, $e);
  }
  catch (DoSomething\Gateway\Exceptions\ApiException $e) {
    dosomething_rogue_handle_failure($data, $response, $failed_task_id, $user, $e);
  }

  return $response;
}

/**
 * Sends updated reportback item(s) to Rogue.
 *
 * @param array $data
 *    Values to send to Rogue.
 * @param int $failed_task_id
 *    Index of failed reportback item if it exists in the dosomething_rogue_failed_task_log.
 *
 */
function dosomething_rogue_update_rogue_reportback_items($data, $failed_task_id = NULL) {
  $client = dosomething_rogue_client();
  try {
    $response = $client->updateReportback($data);

    if (module_exists('stathat')) {
      stathat_send_ez_count('drupal - Rogue - reportback items(s) updated status sent - count', count($data));
    }

    if (!$response) {
      foreach ($data as $values) {
        $values['type'] = 'reportback item';
        dosomething_rogue_handle_failure($values, $response, $failed_task_id);
      }
    }
  }
  catch (GuzzleHttp\Exception\ServerException $e) {
    // These aren't yet caught by Gateway
    foreach ($data as $values) {
      $values['type'] = 'reportback item';
      dosomething_rogue_handle_failure($values, $response, $failed_task_id, $e);
    }
  }
  catch (DoSomething\Gateway\Exceptions\ApiException $e) {
    foreach ($data as $values) {
      $values['type'] = 'reportback item';
      dosomething_rogue_handle_failure($values, $response, $failed_task_id, $e);
    }
  }

  return $response;
}

/**
 * Query to find Rogue reportback item id by Phoenix fid.
 *
 * @param string $fid
 * Phoenix fid of reportback item.
 *
 */
function dosomething_rogue_get_by_file_id($fid) {
  return db_query("SELECT rogue_rbs.rogue_item_id FROM {dosomething_rogue_reportbacks} rogue_rbs WHERE fid = :fid", array(':fid' => $fid))->fetchAll();
}

/**
 * Insert record that stores reference to the most recent uploaded reportback item in
 * phoenix and it's corresponding id's in Rogue
 *
 * @param string $rbid
 * @param string $fid
 * @param object $rogue_reportback
 *
 * @return
 */
function dosomething_rogue_store_rogue_references($rbid, $fid, $rogue_reportback) {
  $most_recent_rogue_item = array_pop($rogue_reportback['data']['reportback_items']['data']);

  if (! dosomething_rogue_get_by_file_id($fid)) {
    // Store references to rogue IDs.
    db_insert('dosomething_rogue_reportbacks')
    ->fields([
      'fid' => $fid,
      'rogue_item_id' => $most_recent_rogue_item['id'],
      'rbid' => $rbid,
      'rogue_reportback_id' => $rogue_reportback['data']['id'],
      'created_at' => REQUEST_TIME,
      ])
    ->execute();
  }
}

/**
 * Given a phoenix status, transform that into the corresponding rogue status
 * @param  string $status phoenix item status
 * @return string
 */
function dosomething_rogue_transform_status($status) {
  if ($status === 'promoted' || $status === 'approved' || $status === 'excluded') {
    return 'accepted';
  }
  else if ($status === 'pending') {
    return 'pending';
  }
  else {
    return 'rejected';
  }
}

/**
 * Insert record that stores reference to the most recent uploaded reportback item in
 * phoenix and it's corresponding id's in Rogue
 *
 * @param array  $values
 * @param array  $response
 * @param object $e
 * @param int $failed_task_id
 * @param object $user
 *
 */
function dosomething_rogue_handle_failure($values, $response = NULL, $failed_task_id = NULL, $user = NULL, $e = NULL) {
  if (module_exists('stathat')) {
      if ($values['type'] === 'reportback') {
        stathat_send_ez_count('drupal - Rogue - reportback failed - count', 1);
      } else {
        stathat_send_ez_count('drupal - Rogue - reportback item status failed - count', 1);
      }
  }

  // If the reportback has previously failed, do not enter a new record.
  // Instead, increment the number of tries and update the time of most recent attempt to send to Rogue.
  if (! is_null($failed_task_id)) {
    $previously_failed = array_pop(dosomething_rogue_previously_failed($failed_task_id));
    update_failed_task_log($values, $previously_failed);
  } else {
    insert_failed_task_into_failed_task_log($values, $response, $e, $user);
  }

  // Save fail to a db log so we can easily export.
  if ($values['type'] === 'reportback') {
    watchdog('dosomething_rogue', 'Reportback not migrated to Rogue: northstar_id: !northstar_id, campaign_id: !campaign_id, campaign run_nid: !campaign_run_id.', ['!northstar_id' => $values['northstar_id'], '!campaign_id' => $values['campaign_id'], '!campaign_run_id' => $values['campaign_run_id']], WATCHDOG_ERROR);

  } else {
    watchdog('dosomething_rogue', 'Reportback item status not migrated to Rogue: Rogue item id: !rogue_item_id, status: !status.', ['!rogue_item_id' => $values['rogue_reportback_item_id'], '!status' => $values['status']], WATCHDOG_ERROR);
  }
}

/**
 * Query to see if a reportback exists in Rogue by Phoenix $rbid.
 *
 * @param string $rbid
 * Phoenix $rbid of reportback.
 *
 */
function dosomething_rogue_rb_exists_in_rogue($rbid) {
  return db_query("SELECT * FROM {dosomething_rogue_reportbacks} rogue_rbs WHERE rbid = :rbid", array(':rbid' => $rbid))->fetchAll();
}

/**
 * Checks to see if the given RB data exists in Phoenix and if so stores in Rogue reference table.
 *
 * @param array $rogue_reportback
 * The response from dosomething_rogue_send_reportback_to_rogue().
 *
 */
function dosomething_rogue_check_rbid_and_store_ref($rogue_reportback) {
  $rbid = dosomething_reportback_exists($rogue_reportback['data']['campaign_id'], $rogue_reportback['data']['campaign_run_id'], $rogue_reportback['data']['drupal_id']);

  // Make sure the reportback exists before we try to use it
  if ($rbid) {
    // Load the reportback
    $reportback = entity_load_unchanged('reportback', [$rbid]);

    // Get the most recently added file
    $fid = array_pop($reportback->fids);

    // Make sure that file is not in the Rogue reference table yet
    if (!dosomething_rogue_get_by_file_id($fid)) {
      // Store reference to the rb in rogue
      dosomething_rogue_store_rogue_references($rbid, $fid, $rogue_reportback);
    }

    // The data needed to pass to the permalink page
    $data = [
      'rbid' => $rbid,
      'fid'  => $fid,
    ];

    return $data;
  }

  return false;
}

  /**
  * Transform reportback into the appropriate scheme to send to Rogue.
  *
  * @param $values - Reportback values to send to Rogue.
  * @param $user - Loaded drupal user
  * @param $northstar_id - User's Northstar user id.
  * @return array
  */
 function dosomething_rogue_transform_reportback($values, $user, $northstar_id) {
   if ($values['nid']) {
     $campaign_id = $values['nid'];
   }
   elseif ($values['campaign_id']) {
     $campaign_id = $values['campaign_id'];
   }

   $run = dosomething_helpers_get_current_campaign_run_for_user($campaign_id);

   $data = [
     'northstar_id' => $northstar_id,
     'drupal_id' => $user->uid,
     'campaign_id' => $campaign_id,
     'campaign_run_id' => $run->nid,
     'quantity' => $values['quantity'],
     'why_participated' => $values['why_participated'],
     'file' => isset($values['file']) ? $values['file'] : NULL,
     'caption' => isset($values['caption']) ? $values['caption'] : NULL,
     'status' => isset($values['status']) ? $values['status'] : 'pending',
     'source' => isset($values['source']) ? $values['source'] : NULL,
     'type' => isset($values['type']) ? $values['type'] : NULL,
     'remote_addr' => dosomething_helpers_ip_address(),
   ];

   if (isset($values['crop_x'])) {
    $cropped_values = dosomething_helpers_extract_values_by_keys($values, ['crop_x', 'crop_y', 'crop_width', 'crop_height', 'crop_rotate']);
    $data = array_merge($data, $cropped_values);
   }

   return $data;
 }

/**
 * Query to check get previously failed reportback item from dosomething_rogue_failed_task_log.
 *
 * @param int $id
 *
 */
function dosomething_rogue_previously_failed($id) {
  return db_query("SELECT * FROM {dosomething_rogue_failed_task_log} failed_rbs WHERE id = :id", array(':id' => $id))->fetchAll();
}

/**
 * Update the timestamp and tries in the dosomething_rogue_failed_task_log for a failed reportback item.
 *
 * @param array $values
 * @param object $previously_failed
 *
 */
function update_failed_task_log($values, $previously_failed) {
  // Increment the number of tries the cron job attempted to send failed record to Rogue.
  $incremented_tries = $previously_failed->tries + 1;

  db_update('dosomething_rogue_failed_task_log')
    ->fields([
      'tries' => $incremented_tries,
      'timestamp' => REQUEST_TIME,
    ])
    ->condition('id', $previously_failed->id)
    ->execute();
}

/**
 * Insert failed task into dosomething_rogue_failed_task_log.
 *
 * @param array $values
 * @param object $user
 * @param object $response
 * @param object $e
 *
 */
function insert_failed_task_into_failed_task_log($values, $response = NULL, $e = NULL, $user = NULL) {
  if ($values['type'] === 'reportback') {
    db_insert('dosomething_rogue_failed_task_log')
      ->fields([
        'drupal_id' => $user->uid,
        'campaign_id' => $values['campaign_id'],
        'campaign_run_id' => $values['campaign_run_id'],
        'quantity' => $values['quantity'],
        'why_participated' => $values['why_participated'],
        'file' => $values['file'],
        'caption' => $values['caption'],
        'type' => $values['type'],
        'timestamp' => REQUEST_TIME,
        'response_code' => (isset($response->code)) ? $response->code : NULL, // @TODO: this is currently null until there a better way to get it from Gateway
        'response_values' => (isset($e)) ? $e->getMessage() : NULL,
        'crop_x' => $values['crop_x'],
        'crop_y' => $values['crop_y'],
        'crop_width' => $values['crop_width'],
        'crop_height' => $values['crop_height'],
        'crop_rotate' => $values['crop_rotate'],
        'northstar_id' => $values['northstar_id'],
        'source' => $values['source'],
        'remote_addr' => $values['remote_addr'],
        'failed_at' => REQUEST_TIME,
      ])
      ->execute();
  } else {
    db_insert('dosomething_rogue_failed_task_log')
      ->fields([
        'rogue_item_id' => $values['rogue_reportback_item_id'],
        'status' => $values['status'],
        'type' => $values['type'],
        'timestamp' => REQUEST_TIME,
        'response_code' => (isset($response->code)) ? $response->code : NULL, // @TODO: this is currently null until there a better way to get it from Gateway
        'response_values' => (isset($e)) ? $e->getMessage() : NULL,
        'failed_at' => REQUEST_TIME,
        'reviewer' => $values['reviewer'],
      ])
      ->execute();
  }
}
