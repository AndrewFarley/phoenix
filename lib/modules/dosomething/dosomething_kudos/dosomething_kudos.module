<?php
/**
 * @file
 * Module file for DoSomething Kudos functionality.
 */

module_load_include('php', 'dosomething_api', 'includes/ApiCache');

include_once 'includes/Kudos.php';
include_once 'includes/KudosController.php';
include_once 'includes/KudosTransformer.php';

/**
 * Implements hook_entity_info().
 *
 * @return array
 */
function dosomething_kudos_entity_info() {
  $info = [];

  $info['kudos'] = [
    'label' => t('Kudos'),
    'base table' => 'dosomething_kudos',
    'entity keys' => [
      'id' => 'kid',
      'label' => 'kid',
    ],
    'entity class' => 'Kudos',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'KudosController',
    'module' => 'dosomething_kudos',
  ];

  return $info;
}


/**
 * Build out query to collect Kudos based on supplied filter parameters.
 *
 * @param array $params An associative array of conditions to filter by:
 *  - fid: (string|array) Single string or array of multiple Reportback Item ids.
 * @return EntityFieldQuery
 */
function dosomething_kudos_build_kudos_query($params) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'kudos');

  if (isset($params['fid'])) {
    if (is_array($params['fid'])) {
      $query->propertyCondition('fid', $params['fid'], 'IN');
    } else {
      $query->propertyCondition('fid', $params['fid'], '=');
    }
  }

  return $query;
}


/**
 * Execute query to collect Kudos based on supplied filter parameters.
 *
 * @param array $params An associative array of conditions to filter by:
 *  - fid: (string|array) Single string or array of multiple Reportback Item ids.
 *  - count: (int) Number of Kudos items to return; will default to NULL.
 *  - start: (int) Which Kudos to start with in collection; predominantly used for pagination.
 * @return array
 */
function dosomething_kudos_get_kudos_query($params = []) {
  $count = isset($params['count']) ? $params['count'] : NULL;
  $start = isset($params['start']) ? $params['start'] : 0;

  $query = dosomething_kudos_build_kudos_query($params);

  if ($count && is_int($count) & $count !== 'all') {
    $query->range($start, $count);
  }

  $result = $query->execute();
  return array_keys($result['kudos']);
}


/**
 * Sort kudos collection based on taxonomy term and then group them by term.
 *
 * @param  array $data Collection of individual kudos items.
 * @param  array $options
 * @return array
 */
function dosomething_kudos_sort($data) {
  // The array containing collection of kudos items passed to this function
  // consists of individual kudos items. However, within this collection
  // there could be multiple kudos items that all fall within the same
  // taxonomy term. So the following series of functions sort and then
  // group the kudos based on taxonomy term, along with providing a total
  // count of kudos for each term.

  usort($data, 'dosomething_kudos_sort_by_taxonomy_term');

  $data = dosomething_kudos_group_by_taxonomy_term($data);

  return $data;
}


/**
 * Sort kudos collection by taxonomy term id using a value comparison function.
 *
 * @param array|object $a Array of Kudos data or instance of Kudos class object.
 * @param array|object $b Array of Kudos data or instance of Kudos class object.
 * @return mixed
 */
function dosomething_kudos_sort_by_taxonomy_term($a, $b) {
  $a = (object) $a;
  $b = (object) $b;

  // Sort by taxonomy term id.
  $result = $a->term['id'] - $b->term['id'];

  // If term ids are identical, sort by kudos id.
  if (!$result) $result = $a->id - $b->id;

  return $result;
}

/**
 * Group all kudos in collection and organize them by taxonomy term,
 * including current users activity on retrieved kudos records.
 *
 * @param  array $data Array containing Kudos items.
 * @return array
 */
function dosomething_kudos_group_by_taxonomy_term($data) {
  $output = [];
  $activity = [];

  foreach ($data as $item) {
    if (!($item instanceof Kudos)) {
      $item = (object) $item;
    }

    // If term is not in approved reactions list, skip it!
    if (!in_array($item->term['name'], Kudos::getApprovedReactions())) {
      continue;
    }

    // If the term is not already in the $output array then add it.
    if (!array_key_exists($item->term['id'], $output)) {
      $output[$item->term['id']] = [
        'term' => $item->term,
      ];
    }

    if (!isset($output[$item->term['id']]['term']['total'])) {
      $output[$item->term['id']]['term']['total'] = 0;
    }

    $output[$item->term['id']]['term']['total'] += 1;

    $output[$item->term['id']]['current_user'] = null;

    $current_user = dosomething_helpers_get_current_user();

    if ($current_user) {
      $current_user_activity = dosomething_kudos_compare_current_user_activity($item, $current_user);

      if ($current_user_activity) {
        $activity[$item->term['id']] = $current_user_activity;
      }
    }
  }

  return dosomething_kudos_resolve_current_user_activity($current_user, $output, $activity);
}

/**
 * For each kudos term on a Reportback Item, append the current user's activity on that term.
 *
 * @param  object  $current_user
 * @param  array  $data
 * @param  array  $activity
 * @return array
 */
function dosomething_kudos_resolve_current_user_activity($current_user, $data, $activity) {
  if (!$current_user) {
    return $data;
  }

  foreach ($data as $index => $item) {
    if (isset($activity[$index])) {
      $data[$index]['current_user'] = $activity[$item['term']['id']];
    } else {
      $data[$index]['current_user'] = [
        'drupal_id' => $current_user->uid,
        'reacted' => false,
        'kudos_id' => null,
      ];
    }
  }

  return array_values($data);
}

/**
 * [dosomething_kudos_compare_current_user_activity description]
 * @param  object  $data
 * @param  object  $current_user
 * @return null|array
 */
function dosomething_kudos_compare_current_user_activity($data, $current_user) {
  $reaction_user = $data->user;

  $reacted = $reaction_user['drupal_id'] === $current_user->uid ? true : false;

  if (! $reacted) {
    return false;
  }

  return [
    'drupal_id' => $current_user->uid,
    'reacted' => $reacted,
    'kudos_id' => $reacted ? $data->id : null,
  ];
}

/**
 * Given a term in the kudos vocab, return the tid of that term.
 * @param  $name string
 * @return int
 */
function dosomething_kudos_get_term_id_by_name($name) {
  $term = taxonomy_get_term_by_name($name, 'kudos');

  return array_pop($term)->tid;
}

/**
 * Aggregate the total number of Kudos kudoed on a particular file.
 * @param  string $fid
 * @param  string $term
 * @return int
 */
function dosomething_kudos_get_total_for_file_by_term_name($fid, $term) {
  $tid = dosomething_kudos_get_term_id_by_name($term);
  $kudos = db_select('dosomething_kudos', 'k')
      ->fields('k')
      ->condition('fid', $fid, '=')
      ->condition('tid', $tid, '=')
      ->execute()
      ->rowCount();
  return $kudos;
}

/**
 * Get the ids of Kudos on a file by a user and pair with corresponding term
 * @param  string $fid
 * @return array
 */
function dosomething_kudos_get_kudos_for_user_by_file($fid) {
  global $user;

  $kudos = db_select('dosomething_kudos', 'k')
      ->fields('k', ['tid', 'kid'])
      ->condition('fid', $fid, '=')
      ->condition('uid', $user->uid, '=')
      ->execute()
      ->fetchAllAssoc('tid');

  return $kudos;
}

/**
 * Check to see if the kudos term has been selected by the user on specified
 * reportback.
 *
 * @param  object $reportback_item
 * @param  string $term
 * @return bool
 */
function dosomething_kudos_term_is_selected($reportback_item, $term) {
  $reportback_item = (object) $reportback_item;

  if (! $reportback_item->existing_kids) {
    return false;
  }

  $id = dosomething_kudos_get_term_id_by_name($term);

  if (! $id) {
    return false;
  }

  if (! isset($reportback_item->existing_kids[$id])) {
    return false;
  }

  return true;
}

/**
 * Returns whether it is safe or not to display kudos on a given nid
 * @param  int $nid NID of the campaign to check
 * @return bool
 */
function dosomething_kudos_disable_reactions($nid) {
  return !variable_get('dosomething_reportback_kudos_enabled', FALSE) || dosomething_helpers_get_variable('node', $nid, 'disable_reactions');
}
