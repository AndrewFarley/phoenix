<?php
/**
 * @file
 * Code for the dosomething_gladiatior.module.
 */

include_once('dosomething_gladiator.admin.inc');
include_once('dosomething_gladiator.cron.inc');

define('GLADIATOR_URL', variable_get('dosomething_gladiator_url', 'http://gladiator.app:8000/api'));
define('GLADIATOR_VERSION', variable_get('dosomething_gladiator_version', 'v1'));
define('GLADIATOR_KEY', variable_get('dosomething_gladiator_key', 'uxm107oct1977'));

function dosomething_gladiator_menu() {
  $items = [];
  $items['admin/config/services/gladiator'] = array(
    'title' => 'Gladiator',
    'description' => 'Manage Gladiator connection settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_gladiator_config_form'),
    'access arguments' => array('administer modules'),
    'file' => 'dosomething_gladiator.admin.inc',
  );
  return $items;
}
/**
 * Build the Guzzle HTTP Client to make requests to Gladiator.
 *
 * https://github.com/DoSomething/gladiator
 */
function _dosomething_gladiator_build_http_client() {
  $client = [
    'base_url' => GLADIATOR_URL . '/' . GLADIATOR_VERSION,
    'headers' => ['Content-Type' => 'application/json', 'Accept' => 'application/json', 'X-DS-Gladiator-API-Key' => GLADIATOR_KEY],
  ];

  return $client;
}

/**
 * Check if the given user is already in a competition for this campaign.
 * If they are in a competition or waiting room in Gladiator, update their
 * local signup record to reflect that.
 *
 * @param $signup - signup entity
 *
 * @return bool
 */
function dosomething_gladiator_in_a_competition($signup) {
  $client = _dosomething_gladiator_build_http_client();

  $query = drupal_http_build_query([
    'id' => dosomething_user_get_northstar_id($signup->uid),
    'campaign_id' => $signup->nid,
    'campaign_run_id' => $signup->run_nid,
  ]);

  $response = drupal_http_request($client['base_url'] . '/users?'.$query, [
    'method' => 'GET',
    'headers' => $client['headers'],
  ]);

  $json = json_decode($response->data, TRUE);
  $already_in_gladiator = !empty($json['data']['waitingRoom']) || !empty($json['data']['competition']);

  // If signup exists in Gladiator (from Phoenix Next, for example), set
  // the "signup data form" timestamp so we know not to ask again.
  if ($already_in_gladiator) {
    dosomething_signup_update_signup_data(['sid' => $signup->sid], ['competition_signup' => $already_in_gladiator]);
  }

  return $already_in_gladiator;
}

/**
 * Sends a user to Gladiator (https://github.com/DoSomething/gladiator)
 *
 * @param object $user
 *   The user that signup up for the competition.
 * @param array $values
 *   Values from the signup data form.
 */
function dosomething_gladiator_send_user_to_gladiator($user, $values) {
  $client = _dosomething_gladiator_build_http_client();

  $options = [
  'method' => 'POST',
  'headers' => $client['headers'],
  'data' =>
      json_encode([
        'id' => $user->mail,
        'term' => 'email',
        'campaign_id' => $values['nid'],
        'campaign_run_id' => $values['run_nid'],
      ]),
  ];

  $response = drupal_http_request($client['base_url'] . '/users', $options);

  if ($response->code == 200 && module_exists('stathat')) {
    stathat_send_ez_count('drupal - Gladiator - user sent - count', 1);
  }
  else {
    // Log as a watchdog error, and stathat value.
    if (module_exists('stathat')) {
     stathat_send_ez_count('drupal - Gladiator - user failed - count', 1);
    }
    // Save fail to a db log so we can easily export.
    db_insert('dosomething_gladiator_failed_task_log')
      ->fields(array(
        'uid' => $user->uid,
        'mail' => $user->mail,
        'nid' => $values['nid'],
        'run_nid' => $values['run_nid'],
        'timestamp' => REQUEST_TIME,
        'response_code' => $response->code,
        'response_values' => json_encode($response),
        ))
      ->execute();

    watchdog('dosomething_gladiator','user not migrated', array('user' => $user->mail), WATCHDOG_ERROR);
  }

}
