<?php

use Carbon\Carbon;

function _signup_resource_definition() {
  $signup_resource = [];
  $signup_resource['signups'] = [
    'operations' => [

      // @Retrieve
      'retrieve' => [
        'help' => 'Retrieve a specified signup.',
        'file' => [
          'type' => 'inc',
          'module' => 'dosomething_api',
          'name' => 'resources/signup_resource',
        ],
        'callback' => '_signup_resource_retrieve',
        'args' => [
          [
            'name' => 'sid',
            'description' => 'The sid of the signup record to retrieve.',
            'optional' => FALSE,
            'type' => 'int',
            'source' => ['path' => 0],
          ],
        ],
        'access callback' => '_signup_resource_access',
        'access arguments' => ['view'],
      ],

      // @Index
      'index' => [
        'help' => 'List all signups.',
        'file' => [
          'type' => 'inc',
          'module' => 'dosomething_api',
          'name' => 'resources/signup_resource',
        ],
        'callback' => '_signup_resource_index',
        'args' => [
          [
            'name' => 'user',
            'description' => 'The id of the specified user to get signups for.',
            'optional' => TRUE,
            'type' => 'string',
            'source' => ['param' => 'user'],
            'default value' => NULL,
          ],
          [
            'name' => 'users',
            'description' => 'The ids of the specified users to get signups for.',
            'optional' => TRUE,
            'type' => 'string',
            'source' => ['param' => 'users'],
            'default value' => NULL,
          ],
          [
            'name' => 'campaigns',
            'description' => 'The ids of the specified campaigns to get signups for.',
            'optional' => TRUE,
            'type' => 'string',
            'source' => ['param' => 'campaigns'],
            'default value' => NULL,
          ],
          [
            'name' => 'count',
            'description' => 'The number of signups to retrieve.',
            'optional' => TRUE,
            'type' => 'int',
            'source' => ['param' => 'count'],
            'default value' => 25,
          ],
          [
            'name' => 'page',
            'description' => 'The zero-based index of the page to get, defaults to 0.',
            'optional' => TRUE,
            'type' => 'int',
            'source' => ['param' => 'page'],
            'default value' => 1,
          ],
          [
            'name' => 'competition',
            'description' => 'Only competition signups, defaults to false.',
            'optional' => TRUE,
            'type' => 'boolean',
            'source' => ['param' => 'competition'],
            'default value' => FALSE,
          ],
          [
            'name' => 'runs',
            'description' => 'The ids of the specified campaign runs to get signups for.',
            'optional' => TRUE,
            'type' => 'string',
            'source' => ['param' => 'runs'],
            'default value' => NULL,
          ],
        ],
        'access callback' => '_signup_resource_access',
        'access arguments' => ['index'],
      ],

      // @Create
      'create' => [
        'help' => 'Create a new signup record.',
        'file' => [
          'type' => 'inc',
          'module' => 'dosomething_api',
          'name' => 'resources/signup_resource',
        ],
        'callback' => '_signup_resource_create',
        'args' => [
          [
            'name' => 'campaign_id',
            'description' => 'The id of the campaign to create the signup for.',
            'optional' => FALSE,
            'type' => 'string',
            'source' => [
              'data' => 'campaign_id',
            ],
          ],
          [
            'name' => 'campaign_run_id',
            'description' => 'The id of the campaign run to create the signup for.',
            'optional' => TRUE,
            'type' => 'string',
            'source' => [
              'data' => 'campaign_run_id',
            ],
            'default value' => NULL,
          ],
          [
            'name' => 'key',
            'description' => 'The custom key generated by the platform for auto-signing up a user for a specified campaign.',
            'optional' => TRUE,
            'type' => 'string',
            'source' => [
              'data' => 'key',
            ],
            'default value' => NULL,
          ],
          [
            'name' => 'user_id',
            'description' => 'The id of the specified user to create the signup for.',
            'optional' => TRUE,
            'type' => 'string',
            'source' => [
              'data' => 'user_id',
            ],
            'default value' => NULL,
          ],
        ],
        'access callback' => '_signup_resource_access',
        'access arguments' => ['create'],
      ],
    ],
  ];

  return $signup_resource;
}

function _signup_resource_access() {
  // Temp universal access for now.
  return TRUE;
}

/**
 * Retrieve and show index list response of signups requested.
 *
 * @param string $user
 * @param string $campaigns
 * @param int $count
 * @param int $page
 * @param boolean $competition
 * @param string $runs
 *
 * @return array
 */
function _signup_resource_index($user, $users, $campaigns, $count, $page, $competition, $runs) {

  if (isset($users)) {
    $user = $users;
  }

  $parameters = [
    'user' => $user,
    'campaigns' => $campaigns,
    'count' => $count,
    'page' => $page,
    'competition' => $competition,
    'runs' => $runs,
  ];

  if (variable_get('rogue_collection', FALSE)) {
    if ($user) {
      $northstar_user_id = dosomething_user_get_northstar_id($user);
      $user_object = user_load($user);
    }

     $rogue = dosomething_rogue_client();

     $response = $rogue->getActivity([
       'filter' => [
         'northstar_id' => $northstar_user_id,
         'campaign_id' => $campaigns,
       ],
     ]);

    if ($response) {
      $transformed_response = collect($response['data'])->map(function($signup) {
        $campaign = node_load($signup['campaign_id']);
        $campaign = Campaign::get($signup['campaign_id']);

        if ($signup['posts']['data']) {
          $posts = [];
          $flagged = FALSE;

          foreach ($signup['posts']['data'] as $post) {
            $formatted_post = [];
            $formatted_post['id'] = $post['id'];
            $formatted_post['status'] = $post['status'];
            $formatted_post['caption'] = $post['media']['caption'];
            $formatted_post['uri'] = null;
            $formatted_post['media']['uri'] = $post['media']['url'];
            $formatted_post['media']['type'] = 'image';
            $formatted_post['created_at'] = (new Carbon($post['created_at']))->timestamp;

            if ($post['reactions']) {
              $reactions = [];
              foreach ($post['reactions'] as $reaction) {
                $formatted_reaction = [];
                $formatted_reaction['id'] = $reaction['id'];
                $formatted_reaction['term'] = 'heart';
                $formatted_reaction['reportback_item'] = $reaction['post_id'];
                $formatted_reaction['user'] = $reaction['northstar_id'];
                $formatted_reaction['uri'] = null;
                array_push($reactions, $formatted_reaction);
              }
            }

            $formatted_post['kudos'] = $reactions ? $reactions : null;
            array_push($posts, $formatted_post);

            if ($post['status'] === 'rejected') {
              $flagged = TRUE;
            }
          }
        }

        return [
          'id' => $signup['signup_id'],
          'created_at' => (new Carbon($signup['created_at']))->timestamp,
          'campaign_run' => [
            'id' => $signup['campaign_run_id'],
            'current' => (dosomething_helpers_get_current_campaign_run_for_user($signup['campaign_id'], $user_object)->nid == $signup['campaign_run_id']) ? TRUE : FALSE,
          ],
          'uri' => null,
          'campaign' => [
            'id' => $signup['campaign_id'],
            'title' => $campaign->title,
            'campaign_runs' => $campaign->campaign_runs,
            'language' => [
              'language_code' => $campaign->language['language_code'],
              'prefix' => $campaign->language['prefix'],
            ],
            'translations' => $campaign->translations,
            'tagline' => $campaign->tagline,
            'status' => $campaign->status,
            'type' => $campaign->type,
            'reportback_info' => $campaign->reportback_info,
          ],
          'reportback' => [
            'id' => $signup['signup_id'],
            'created_at' => (new Carbon($signup['created_at']))->timestamp,
            'updated_at' => (new Carbon($signup['updated_at']))->timestamp,
            'quantity' => $signup['quantity'],
            'uri' => null,
            'why_participated' => $signup['why_participated'],
            'flagged' => $flagged,
            'reportback_items' => [
              'total' => count($signup['posts']['data']),
              'data' => $posts,
            ],
          ],
        ];
      });
    }
    $final_response = [];

    // Mimic meta data response
    $final_response['meta'] = $response['meta'];

    $final_response['meta']['pagination']['links']['next_uri'] = $response['meta']['pagination']['links']['next'];
    $final_response['meta']['pagination']['links']['prev_uri'] = $response['meta']['pagination']['links']['prev'];
    unset($final_response['meta']['pagination']['links']['next']);
    unset($final_response['meta']['pagination']['links']['prev']);

    // Add data to the response
    $final_response['data'] = $transformed_response;

    return $final_response;
  }

    return (new SignupTransformer)->index($parameters);
}

/**
 * Create a new signup record.
 *
 * @param  string $user_id
 * @param  string $campaign_id
 * @param  string $campaign_run_id
 *
 * @return Response?
 */
function _signup_resource_create($campaign_id, $campaign_run_id, $key, $user_id) {
  $parameters = [
    'campaign_id' => $campaign_id,
    'campaign_run_id' => $campaign_run_id,
    'key' => $key,
    'user_id' => $user_id,
  ];

  return (new SignupTransformer)->create($parameters);
}

/**
 * Retrieve and show response for signup request.
 *
 * @param string $sid Signup id.
 *
 * @return array
 */
function _signup_resource_retrieve($sid) {
  return (new SignupTransformer)->show($sid);
}
