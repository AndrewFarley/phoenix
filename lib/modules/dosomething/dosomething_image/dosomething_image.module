<?php
/**
 * @file
 * Code for the dosomething_image feature.
 */

include_once 'dosomething_image.features.inc';

/**
 * Returns a themed image for any image field
 * @param int $nid
 *  The image node id.
 * @param string $ratio
 *  The image field to pull from the desired image ratio (vert, horiz, sq).
 * @param string $style
 *  The image style preset/size to return the image.
 *
 * @return array
 *  A themed image.
 */
function dosomething_image_get_themed_image($nid, $ratio, $style) {
  // Attempt to get that image from cache.
  if ($cached_img = cache_get('ds_img_' . $nid . '_' . $ratio . '_' . $style, 'cache_dosomething_image')) {
    return $cached_img->data;
  }
  // Theme the image.
  else {
    $path = dosomething_image_get_image_url($nid, $ratio);

    $img = theme('image_style', array('style_name' => $style, 'path' => $path));
    // Store the themed image.
    cache_set('ds_img_' . $nid . '_' . $ratio . '_' . $style, $img, 'cache_dosomething_image');
    return $img;
  }
}

/**
 * Returns an image path.
 * @param int $nid
 *  The image node id.
 * @param string $ratio
 *  The image field to pull from the desired image ratio (portrait, landscape, square).
 * @param string $style
 *  The image style preset/size to return the image.
 *
 * @return string
 *  An image url.
 */
function dosomething_image_get_image_url($nid, $ratio) {
   $node = node_load($nid);
    switch ($ratio) {
      case 'portrait':
        $path =  $node->field_image_portrait[LANGUAGE_NONE][0]['uri'];
        break;
      case 'landscape':
        $path = $node->field_image_landscape[LANGUAGE_NONE][0]['uri'];
        break;
      case 'square':
        $path =  $node->field_image_square[LANGUAGE_NONE][0]['uri'];
        break;
    }
    return $path;
}

/**
 * Returns a sized image path.
 * @param int $nid
 *  The image node id.
 * @param string $ratio
 *  The image field to pull from the desired image ratio (vert, horiz, sq).
 *
 * @return string
 *  A sized image url.
 */
function dosomething_image_get_themed_image_url($nid, $ratio, $style) {
  $base_path = dosomething_image_get_image_url($nid, $ratio);
  return image_style_url($style, $base_path);
}

/**
 * Implements hook_node_view().
 */
function dosomething_image_node_view($node, $view_mode, $langcode) {
  // Make sure dosomething_helpers is enabled.
  if (!module_exists('dosomething_helpers')) { return; }

  // If viewing an image node:
  if ($node->type == 'image' && $view_mode == 'full') {
    $entityref_fields = array(
      'field_gallery_image',
      'field_hero_image',
      'field_image_campaign_cover',
      'field_image_psa_replacement',
      'field_image_reportback_gallery',
      'field_image_sponsor_logo',
      'field_image_step_gallery',
      'field_intro_image',
    );
    dosomething_helpers_add_entityref_links($node, $entityref_fields);
  }
}
