<?php
/**
 * @file
 * Code for the DoSomething User feature.
 */

include_once 'dosomething_user.features.inc';

/**
 * Implements hook_node_access().
 */
function dosomething_user_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  // Internal content types to be viewed by staff only:
  $staff_types = array('fact', 'image');
  // If viewing an internal staff type:
  if (in_array($type, $staff_types) && $op == 'view') {
    // If staff user, able to view the Fact node.
    if (dosomething_user_is_staff($account)) {
      return NODE_ACCESS_ALLOW;
    }
    // Otherwise, no facts for you.
    return NODE_ACCESS_DENY;
  }
}

 /**
  * Confirms that a specific cell phone number is valid.
  *
  * A valid phone number is a number with either 10 or 11 digits
  * (as long as the first digit is a "1").
  * Valid phone numbers do not have 3 consecutive 5's in any part, nor do they
  * use punctuation where there should be numbers.  Phone numbers also
  * do not have 9 consecutive, equal digits (e.g. 999-999-9999).
  *
  * @code
  *  dosomething_user_valid_cell('123-456-7890');
  *  # => true
  *  dosomething_user_valid_cell('123.456 7890');
  *  # => true
  *  dosomething_user_valid_cell('1 (123) 456-7890');
  *  # => true
  *  dosomething_user_valid_cell('123-555-9942');
  *  # => false
  *  dosomething_user_valid_cell('1 902 #@@ 1234');
  *  # => false
  *  dosomething_user_valid_cell('999 999 9999');
  *  # => false
  * @endcode
  *
  * @param string $number
  *   The cell phone number that should be validated.
  *
  * @return bool
  *   True if valid, else false.
  */
function dosomething_user_valid_cell($number) {
  preg_match('#^(?:\+?1([\-\s\.]{1})?)?\(?([0-9]{3})\)?(?:[\-\s\.]{1})?([0-9]{3})(?:[\-\s\.]{1})?([0-9]{4})#', $number, $valid);
  preg_match('#([0-9]{1})\1{9,}#', preg_replace('#[^0-9]+#', '', $number), $repeat);
  return !empty($valid) && empty($repeat) && strpos($number, '555') === FALSE;
}

/**
 * Determines if a user is on the ds staff.
 *
 * @param object $user
 *   A user object.
 *
 * @return bool
 *   Returns true if user has a staff role applied, else false.
 */
function dosomething_user_is_staff($user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  // Create an array of staff role ids.
  $staff_roles = array(
    user_role_load_by_name('administrator')->rid,
    user_role_load_by_name('editor')->rid,
  );

  // Does this user have a staff rid?
  if (array_intersect(array_keys($user->roles), $staff_roles)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function dosomething_user_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_block':
    case 'user_login':
      // Add additional submission/validation handlers.
      array_unshift($form['#validate'], 'dosomething_user_login_validate');
      $form['#submit'][] = 'dosomething_user_login_submit';
      break;

    case 'user_profile_form':
    case 'user_register_form':
      $form['#validate'][] = 'dosomething_user_register_validate';
  }
}
/**
 * Custom login validation.
 *
 * Allows for users to login via email or mobile number.
 * @see dosomething_user_form_alter()
 */
function dosomething_user_login_validate($form, &$form_state) {
  // Note: Taken from logintoboggan module.
  if (isset($form_state['values']['name']) && $form_state['values']['name']) {
    if ($account = dosomething_user_get_user_by_email($form_state['values']['name'])) {
      form_set_value($form['name'], $account->name, $form_state);
    }
    elseif ($number = $form_state['values']['name']) {
      if ($account = dosomething_user_get_user_by_cell($number)) {
        form_set_value($form['name'], $account->name, $form_state);
      }
    }
  }
}
/**
 * Addictional user registration validation hook.
 *
 * Clean user data on registration.
 * @see dosomething_user_form_alter()
 */
function dosomething_user_register_validate($form, &$form_state) {
  $mobile = $form_state['values']['field_mobile'][LANGUAGE_NONE][0]['value'];
  if (isset($mobile)) {
    // Clean the user input text.
    $mobile_clean = dosomething_user_clean_cell_number($mobile);
    if ($user = dosomething_user_get_user_by_cell($mobile_clean)) {
      // This dude already has an account.
      form_set_error('dosomething_user_already_registered', t('The phone number '. $mobile . ' is already registered. Have you ' . l('forgotten your password?', 'user/password')));
    }
    else {
      // Store only the numbers.
      form_set_value($form['field_mobile'], array(LANGUAGE_NONE => array(0 => array('value' => $mobile_clean))), $form_state);
    }
  }
}

/**
 * Additional submit callback called from user login and register forms.
 * @see dosomething_user_form_alter()
 */
function dosomething_user_login_submit($form, &$form_state) {
  if (module_exists('dosomething_signup')) {
    $obj = menu_get_object();
    // If we are viewing a campaign node:
    if (isset($obj->type) && $obj->type == 'campaign') {
      // Add info to the login form & sign the user up.
      dosomething_user_signup($form, $form_state, $obj);
    }
  }
}

/**
 * Additional callback to sign user up for campaign.
 *
 * Signs up global $user for a node $nid if $nid isset in the $form_state.
 * This function will only work upon registration if account variables
 * are set to the following:
 * -- A visitor can register for the site without admin approval
 * -- Email verification is not required when user creates account.
 *
 * Otherwise, the global $user upon account creation is set with uid 0
 * and signup will fail.
 *
 * @see dosomething_user_strongarm()
 */
function dosomething_user_signup($form, &$form_state, $obj) {
  // Add a hidden nid field.
  $form['nid'] = array(
    '#type' => 'hidden',
    // @TODO: Encrypt me.
    '#value' => $obj->nid,
  );
  $nid = $form_state['input']['nid'];
  // Redirect to node (this is needed for user_register form).
  $form_state['redirect'] = 'node/' . $nid;
  // If a signup does not exist:
  if (!dosomething_signup_exists($nid)) {
    // Signup for the node.
    dosomething_signup_insert($nid);
  }
}

/**
 * Get a user by email address.
 *
 * @param string $email
 *   The user's email.
 *
 * @return object/bool
 *   If true return the user object, else false.
 */
function dosomething_user_get_user_by_email($email) {
  $user = user_load_by_mail($email);
  return $user ? $user : FALSE;
}

/**
 * Search for users users by their cell phone number.
 *
 * @param string $number
 *   The cell phone number for which you are searching.
 *
 * @return object/bool
 *   The user account object, or false if no user was found.
 */
function dosomething_user_get_user_by_cell($number) {
  $clean_number = dosomething_user_clean_cell_number($number);

  $query = db_select('field_data_field_mobile', 'm')
            ->fields('m', array('entity_id'))
            ->condition('field_mobile_value', $clean_number)
            ->execute();
  $uid = $query->fetchField(0);
  if (is_numeric($uid)) {
    return user_load($uid);
  }

  return FALSE;
}


/**
 * Clean input phone number of all non-numeric characters.
 *
 * @param string $number
 *   The user-input mobile number.
 *
 * @return string/bool
 *   Numeric-only string of the phone number, or FALSE if not a 10-digit number.
 */
function dosomething_user_clean_cell_number($number) {
  if (dosomething_user_valid_cell($number)) {
    $trimmed_number = ltrim(preg_replace('#[^0-9]#', '', $number));

    // Make sure the number is 10 digits long.
    if (strlen($trimmed_number) == 10) {
      return $trimmed_number;
    }
    return FALSE;
  }
  return FALSE;
}


