<?php
/**
 * @file
 * Code for the DoSomething Fact feature.
 */

include_once 'dosomething_fact.features.inc';

/**
 * Implements hook_form_alter().
 */
function dosomething_fact_form_fact_node_form_alter(&$form, &$form_state, $form_id) {
  // Change title #type from text to textarea.
  $form['title']['#type'] = 'textarea';
}

/**
 * Implements hook_node_view().
 */
function dosomething_fact_node_view($node, $view_mode, $langcode) {
  // Make sure dosomething_helpers is enabled.
  if (!module_exists('dosomething_helpers')) { return; }

  // If viewing a fact node:
  if ($node->type == 'fact' && $view_mode == 'full') {
    $entityref_fields = array(
      'field_facts',
      'field_fact_problem',
      'field_fact_solution',
    );
    dosomething_helpers_add_entityref_links($node, $entityref_fields);
  }
}

/**
 * Returns array of values of a Fact entityreference field.
 *
 * @param object $fact_field_wrapper
 *   A Fact entityreference field as returned by entity_metadata_wrapper.
 *   e.g. dosomething_fact_get_fact_wrapper_values($wrapper->field_fact_problem)
 *
 * @return mixed
 *   Array of fact values, or NULL if not a valid wrapper property.
 *
 */
function dosomething_fact_get_fact_field_wrapper_values($fact_field_wrapper) {
  // Make sure $fact_field_wrapper is an object.
  if (is_object($fact_field_wrapper)) {
    // If EntityDrupalWrapper, it's a single value field:
    if (get_class($fact_field_wrapper) == 'EntityDrupalWrapper') {
      return dosomething_fact_get_fact_wrapper_values($fact_field_wrapper);
    }
    // If EntityListWrapper, it's a multi-value field:
    if (get_class($fact_field_wrapper) == 'EntityListWrapper') {
      $values = array();
      foreach ($fact_field_wrapper->getIterator() as $delta => $fact) {
        $values[] = dosomething_fact_get_fact_wrapper_values($fact);
      }
      return $values;
    }
  }
  // Return NULL as default.
  return NULL;
}

/**
 * Returns array of values of a Fact node.
 *
 * @param object $fact_wrapper
 *   A Fact node entity_metadata_wrapper.
 *
 * @return array
 *   Multi-dimensional of fact markdown values.
 *
 */
function dosomething_fact_get_fact_wrapper_values($fact_wrapper) {
  $sources = array();
  // Loop through sources multi-value field:
  foreach ($fact_wrapper->field_source_copy->value() as $delta => $source) {
    $sources[] = $source['safe_value'];
  }
  return array(
    'fact' => $fact_wrapper->title->value(),
    'sources' => $sources,
  );
}
