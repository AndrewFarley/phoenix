<?php
/**
 * @file
 * Code for the DoSomething Fact feature.
 */

include_once 'dosomething_fact.features.inc';

/**
 * Implements hook_node_access().
 */
function dosomething_fact_node_access($node, $op, $account) {
  // If viewing a fact:
  if ($node->type == 'fact' && $op == 'view') {
    // If staff user, able to view the Fact node.
    if (module_exists('dosomething_user') && dosomething_user_is_staff($account)) {
      return NODE_ACCESS_ALLOW;
    }
    // Otherwise, no facts for you.
    return NODE_ACCESS_DENY;
  }
}

/**
 * Returns array of values of a Fact entityreference field.
 *
 * @param object $fact_field_wrapper
 *   A Fact entityreference field as returned by entity_metadata_wrapper.
 *   e.g. dosomething_fact_get_fact_wrapper_values($wrapper->field_fact_problem)
 *
 * @return mixed
 *   Array of fact values, or NULL if not a valid wrapper property.
 *
 */
function dosomething_fact_get_fact_field_wrapper_values($fact_field_wrapper) {
  // Make sure $fact_field_wrapper is an object.
  if (is_object($fact_field_wrapper)) {
    // If EntityDrupalWrapper, it's a single value field:
    if (get_class($fact_field_wrapper) == 'EntityDrupalWrapper') {
      return dosomething_fact_get_fact_wrapper_values($fact_field_wrapper);
    }
    // If EntityListWrapper, it's a multi-value field:
    if (get_class($fact_field_wrapper) == 'EntityListWrapper') {
      $values = array();
      foreach ($fact_field_wrapper->getIterator() as $delta => $fact) {
        $values[] = dosomething_fact_get_fact_wrapper_values($fact);
      }
      return $values;
    }
  }
  // Return NULL as default.
  return NULL;
}

/**
 * Returns array of values of a Fact entity.
 *
 * @param object $fact_wrapper
 *   A Fact entityreference as returned by entity_metadata_wrapper.
 *
 * @return array
 *   Array of fact values.
 *
 */
function dosomething_fact_get_fact_wrapper_values($fact_wrapper) {
  return array(
    'fact' => $fact_wrapper->fact->value(),
    'source' => $fact_wrapper->source->value(),
  );
}
