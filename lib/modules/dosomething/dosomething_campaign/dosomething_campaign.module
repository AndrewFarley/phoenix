<?php
/**
 * @file
 * Code for the dosomething_campaign feature.
 */

include_once 'dosomething_campaign.features.inc';
include_once 'dosomething_campaign.theme.inc';
define('DOSOMETHING_CAMPAIGN_PIC_STEP_HEADER', 'Snap a Pic');

/**
 * Implements hook_form_alter().
 */
function dosomething_campaign_form_campaign_node_form_alter(&$form, &$form_state, $form_id) {
  unset($form['field_active_hours'][LANGUAGE_NONE]['#options']['_none']);
  $form['title']['#description'] = t('Title - i.e. "Protect your Pills", "Birthday Mail", or "Teens for Jeans" <br/><strong> Limit: 20 characters. </strong>');
  // Add extra non-field form elements.
  _dosomething_campaign_form_extras($form, $form_state);
}

/**
 * Implements hook_menu().
 */
function dosomething_campaign_menu() {
  $items = array();
  // Admin campaign status page.
  $items['admin/content/campaign-status'] = array(
    'title' => t('Campaign status'),
    'description' => 'Admin page to display campaign node information.',
    'page callback' => 'dosomething_campaign_admin_status_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content overview'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dosomething_campaign.admin.inc',
    'weight' => 100,
  );
  // Internal pitch page for staff.
  $items['node/%node/pitch'] = array(
    'title' => 'Pitch',
    'page callback' => '_dosomething_campaign_pitch_view_mode',
    'page arguments' => array(1),
    'access callback' => '_dosomething_campaign_pitch_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 60,
  );
  // User reportback confirmation page.
  $items['node/%node/confirmation'] = array(
    'title' => 'You Did It!',
    'page callback' => 'dosomething_campaign_reportback_confirmation_page',
    'page arguments' => array(1),
    'access callback' => 'dosomething_campaign_reportback_confirmation_page_access',
    'access arguments' => array(1),
  );
  // Scholarship page.
  $items['about/scholarships'] = array(
    'title' => t('Scholarships'),
    'page callback' => 'dosomething_campaign_scholarships_page',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Page callback for active scholarships.
 */
function dosomething_campaign_scholarships_page() {
  // Fake featurey flag so this is safe to deploy without a theme.
  if (variable_get('dosomething_campaign_scholarship_page_is_active', '')) {
    // Grab published campaigns with cash prizes.
    $scholarships = dosomething_campaign_get_scholarships();
    if (isset($scholarships)) {
      // Get a link, CTA, image, etc for each campaign.
      foreach($scholarships as $key => $scholarship) {
        $rows[$key]['data'] = dosomething_campaign_get_campaign_block_vars($scholarship['nid']);
        unset($rows[$key]['data']['src']);
        $rows[$key]['data']['amount'] = '$' . $scholarship['amount'];
        $rows[$key]['data']['deadline'] = $scholarship['deadline'];
      }

      $vars['header'] = array('nid', 'title', 'cta', 'image', 'amount', 'deadline');
      $vars['rows'] = $rows;

      // For now, just send back a table view of the campaigns.
      return theme('table', $vars);
    }
    return t('No active scholarships right now, check back!');
  }
  return drupal_not_found();
}

/**
 * Returns all published campaigns with a schalorship.
 */
function dosomething_campaign_get_scholarships() {
  // Find active campaigns with a scholarship.
   $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->fields('s', array('field_scholarship_amount_value'))
    ->fields('hs', array('field_high_season_value2'))
    ->condition('type', 'campaign')
    ->condition('status', 1, '=');
  $query->innerJoin('field_data_field_scholarship_amount', 's', 's.entity_id = n.nid');
  $query->leftJoin('field_data_field_high_season', 'hs', 'hs.entity_id = n.nid');
  $query->where('field_high_season_value2 > now()');
  $results = $query->execute();

  foreach($results as $key => $result) {
    // $deadline = date_parse_from_format('Y-m-d H:i:s', $result->field_high_season_value2);
    // For some reason $result->field_high_season_value2 is a string.
    $deadline = strtotime($result->field_high_season_value2);
    $scholarships[$key]['nid'] = $result->nid;
    $scholarships[$key]['title'] = $result->title;
    $scholarships[$key]['amount'] = $result->field_scholarship_amount_value;
    $scholarships[$key]['deadline'] = 'Ends ' . date('F j', $deadline);
  }
  if ($scholarships) {
    return $scholarships;
  }
  // If no active scholarships, return null.
  return NULL;
}

/**
 * Adds form elements for non-field campaign elements.
 */
function _dosomething_campaign_form_extras(&$form, &$form_state) {
  global $user;
  // If this is a node create form, display help text and exit out of extras.
  if (!isset($form['nid']['#value'])) {
    $form['custom'] = array(
      '#markup' => t('The signup data form and custom settings for this campaign will be available upon save.'),
      '#weight' => 60,
    );
    return;
  }
  // If admin:
  if (in_array('administrator', $user->roles) && module_exists('dosomething_reportback')) {
    // Include reportback field configuration form.
    _dosomething_reportback_node_reportback_field_form($form, $form_state);
  }
  // Include signup data form configuration form.
  _dosomething_signup_node_signup_data_form($form, $form_state);
  // Set prefix for custom variables.
  $prefix = dosomething_campaign_get_custom_var_prefix($form['nid']['#value']);
  $form['custom'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom settings'),
    '#weight' => 80,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['custom']['styles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Styles'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $alt_color = $prefix . 'alt_color';
  $form['custom']['styles'][$alt_color] = array(
    '#type' => 'textfield',
    '#title' => t('Alt color'),
    '#default_value' => variable_get($alt_color),
    '#field_prefix' => '#',
    '#size' => 6,
  );
  // Alt bg pattern variable.
  $alt_bg_fid = $prefix . 'alt_bg_fid';
  $form['custom']['styles'][$alt_bg_fid] = array(
    '#type' => 'managed_file',
    '#title' => t('Alt background pattern'),
    '#default_value' => variable_get($alt_bg_fid),
    //@todo: /campaigns/[nid] directory?
    '#upload_location' => 'public://',
  );

  $form['custom']['optins'] = array(
    '#type' => 'fieldset',
    '#title' => t('Third Party Opt-ins'),
    '#description' => t('Custom campaign opt-in values.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['custom']['optins']['mailchimp_grouping_id'] = array(
    '#type' => 'textfield',
    '#title' => t('MailChimp Grouping ID'),
    '#default_value' => variable_get('dosomething_signup_nid_' . $form['nid']['#value'] . '_mailchimp_grouping_id'),
    '#disabled' => TRUE,
  );
  $form['custom']['optins']['mailchimp_group_name'] = array(
    '#type' => 'textfield',
    '#title' => t('MailChimp Group Name'),
    '#default_value' => variable_get('dosomething_signup_nid_' . $form['nid']['#value'] . '_mailchimp_group_name'),
    '#disabled' => TRUE,
  );
  $form['custom']['optins']['mobilecommons'] = array(
    '#type' => 'textfield',
    '#title' => t('MobileCommons Opt-in Path'),
    '#default_value' => variable_get('dosomething_signup_nid_' . $form['nid']['#value'] . '_mobilecommons_id'),
    '#disabled' => TRUE,
  );

  $form['#submit'][] = 'dosomething_campaign_save_custom_vars';
}

/**
 * Saves custom campaign variables.
 */
function dosomething_campaign_save_custom_vars(&$form, &$form_state) {
  $values = $form_state['values'];
  $nid = $values['nid'];
  // Gather all possible custom vars.
  $prefix = dosomething_campaign_get_custom_var_prefix($nid);
  $alt_color = $prefix . 'alt_color';
  $alt_bg_fid = $prefix . 'alt_bg_fid';
  // Save alt color.
  dosomething_campaign_save_custom_var($alt_color, $values[$alt_color]);
  // If a bg fid is set, or if a value already exists:
  if (!empty($values[$alt_bg_fid]) || variable_get($alt_bg_fid)) {
    // Save the bg fid.
    dosomething_campaign_save_alt_bg_fid($nid, $values[$alt_bg_fid]);
  }
}

/**
 * Handles saving a given variable $varname with given $value.
 *
 * @param string $varname
 *   The variable.name field to save (or delete).
 * @param string $value
 *   The variable.value to save. If empty, deletes variable $varname.
 */
function dosomething_campaign_save_custom_var($varname, $value) {
  if (empty($value)) {
    variable_del($varname);
  }
  else {
    variable_set($varname, $value);
  }
}

/**
 * Handles saving a given $fid as alt_bg_fid variable for given node $nid.
 *
 * @param int $nid
 *   The node nid associated with the fid.
 * @param int $fid
 *   The file fid to save.
 */
function dosomething_campaign_save_alt_bg_fid($nid, $fid) {
  // Get current value.
  $varname = dosomething_campaign_get_custom_var_prefix($nid) . 'alt_bg_fid';
  $current_value = variable_get($varname);
  $module = 'dosomething_campaign';

  // If it's the same, nothing to see here.  Keep moving.
  if ($current_value == $fid) {
    return;
  }
  // If we had a value and now we don't:
  if (empty($fid) && is_numeric($current_value)) {
    $file = file_load($current_value);
    // Decrease the file's usage.
    file_usage_delete($file, $module, 'node', $nid);
    // Delete the variable.
    variable_del($varname);
    return;
  }
  // If we've made this far, we've got a new file to save.
  $file = file_load($fid);
  // And a value to set.
  variable_set($varname, $fid);
  // If file status not permanent, make it permanent.
  if ($file->status != FILE_STATUS_PERMANENT) {
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
  }
  // Increase file usage to avoid errors per https://drupal.org/comment/6866102.
  file_usage_add($file, $module, 'node', $nid);
  // If there was a file before:
  if ($file = file_load($current_value)) {
    // Decrease its usage.
    file_usage_delete($file, $module, 'node', $nid);
  }
}

/**
 * Returns string of prefix used to identify a campaign's custom variables.
 */
function dosomething_campaign_get_custom_var_prefix($nid) {
  return 'dosomething_campaign_nid_' . $nid . '_';
}

/**
 * Implements hook_node_delete().
 */
function dosomething_campaign_node_delete($node) {
  // Get custom variable prefix for deleting any custom variables.
  $prefix = dosomething_campaign_get_custom_var_prefix($node->nid);
  // Delete alt color variable from db.
  variable_del($prefix . 'alt_color');
  // Check for alt_bg_fid variable.
  $fid = variable_get($prefix . 'alt_bg_fid');
  // If alt bg file exists:
  if ($file = file_load($fid)) {
    // Decrease its usage.
    file_usage_delete($file, 'dosomething_campaign', 'node', $node->nid);
  }
  // Delete alt bg fid variable from db.
  variable_del($prefix . 'alt_bg_fid');
}

/*
 * Determines whether a user has access to the pitch page.
 */
function _dosomething_campaign_pitch_page_access($node) {
  // Are we on a campaign node?
  if ($node->type == 'campaign') {
    // Is the user a DS admin or editor?
    if (dosomething_user_is_staff()) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Campaign pitch page callback from hook_menu().
 */
function _dosomething_campaign_pitch_view_mode($node) {
  $node_rendered = node_view($node, 'pitch');
  return $node_rendered;
}

/**
 * Determines whether a user has access to the user reportback confirmation page.
 *
 * @param object $node
 *   The loaded campaign node.
 *
 * @return boolean
 */
function dosomething_campaign_reportback_confirmation_page_access($node) {
  // Are we on a campaign node?
  if ($node->type != 'campaign') {
    return FALSE;
  }
  // Allow staff access to confirmation page regardless of reportback status.
  if (module_exists('dosomething_user') && dosomething_user_is_staff()) {
    return TRUE;
  }
  // Else only grant if the user has reported back on this campaign.
  elseif (module_exists('dosomething_reportback') && dosomething_reportback_exists($node->nid)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Page callback for the user reportback confirmation page.
 *
 * @param object $node
 *   The loaded campaign node.
 *
 * @return string
 *   Rendered HTML.
 */
function dosomething_campaign_reportback_confirmation_page($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  // Link to "more campaigns".
  $more_campaigns_link = l('Find more campaigns', 'campaigns', array(
    'attributes' => array('class' =>
      array('btn', 'large')
    ))
  );
  // Link back to current node.
  $campaign_link_title = t('Back to @title', array('@title' => $node->title));
  $back_to_campaign_link = l($campaign_link_title, 'node/' . $node->nid);
  // Store current node's primary cause tid.
  $tid = $wrapper->field_primary_cause->getIdentifier();
  // Get recommended campaign nids for term $tid and current user.
  $rec_nids = dosomething_campaign_get_recommended_campaign_nids($tid);
  // Initalize array to store reccomended campaign vars.
  $rec_vars = array();
  // Loop through rec_nids to load relevant variables.
  foreach ($rec_nids as $nid) {
    $rec_vars[] = dosomething_campaign_get_campaign_block_vars($nid);
  }
  return theme('reportback_confirmation', array(
    'copy' => $wrapper->field_reportback_confirm_msg->value(),
    'more_campaigns_link' => $more_campaigns_link,
    'back_to_campaign_link' => $back_to_campaign_link,
    'recommended' => $rec_vars,
    )
  );
}

/**
 * Returns an array of variables for a given recommended campaign $nid.
 *
 * @param int $nid
 *   The node $nid to return variables for.
 *
 * @return array
 *   An array of variables.
 */
function dosomething_campaign_get_campaign_block_vars($nid, $image_size = '740x480') {
  $wrapper = entity_metadata_wrapper('node', $nid);
  $path = 'node/' . $nid;
  $image = NULL;
  $image_nid = $wrapper->field_image_campaign_cover->getIdentifier();
  if ($image_nid) {
    $image = dosomething_image_get_themed_image_url($image_nid, 'landscape', $image_size);
  }
  return array(
    'nid' => $wrapper->getIdentifier(),
    'title' => $wrapper->label(),
    'call_to_action' => $wrapper->field_call_to_action->value(),
    'image' => $image,
    'path' => $path,
    'pretty_path' => drupal_get_path_alias($path),
    'staff_pick' => FALSE,
  );
}

/**
 * Implements hook_theme().
 */
function dosomething_campaign_theme($existing, $type, $theme, $path) {
  return array(
    'reportback_confirmation' => array(
      'template' => 'reportback-confirmation',
      'path' => drupal_get_path('module', 'dosomething_campaign') . '/theme',
      'variables' => array(
        'copy' => NULL,
        'more_campaigns_link' => NULL,
        'back_to_campaign_link' => NULL,
        'recommended' => NULL,
      ),
    ),
    'campaign_block' => array(
      'template' => 'campaign-block',
      'path' => drupal_get_path('module', 'dosomething_campaign') . '/theme',
      'variables' => NULL,
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function dosomething_campaign_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'campaign' && $view_mode == 'full') {
    // Add signup_data_form variables if needed.
    dosomething_campaign_add_signup_data_form_vars($node);
    // Add reportback form variable:
    if (module_exists('dosomething_reportback')) {
      if ($rbid = dosomething_reportback_exists($node->nid)) {
        $reportback = reportback_load($rbid);
      }
      else {
        // Initalize reportback as a new entity for this nid.
        $reportback = entity_create('reportback', array(
          'nid' => $node->nid,
          'quantity' => NULL,
          'why_participated' => NULL,
        ));
      }
      // Set Reportback Form variable in node content for rendering in theme layer.
      $node->content['reportback_form'] = drupal_get_form('dosomething_reportback_form', $reportback);
    }
    // Add Zendesk form variable:
    if (module_exists('dosomething_zendesk')) {
      $node->content['zendesk_form'] = drupal_get_form('dosomething_zendesk_form', $node);
    }
  }
}

/**
 * Adds relevant signup_data_form variables into the $node.
 */
function dosomething_campaign_add_signup_data_form_vars(&$node) {
  // Load signup_data_form configuration data.
  $config = dosomething_signup_get_signup_data_form_info($node->nid);
  // If it doesn't exist, or is not active.
  if (!$config || $config['status'] != 1) {
    // Nothing to see here.
    return;
  }

  // Store the label for the link to the modal.
  $node->content['signup_data_form_link'] = $config['link_text'];
  // Load signup sid.
  $sid = dosomething_signup_exists($node->nid);
  // If no signup exists:
  if (!$sid) {
    // Staff is viewing a campaign which they haven't signed up for.
    $node->content['signup_data_form'] = array(
      '#markup' => "You haven't signed up for this campaign!",
    );
    return;
  }
  // Load the signup entity.
  $signup = signup_load($sid);
  // Pass to the user signup data form.
  $node->content['signup_data_form'] = drupal_get_form('dosomething_signup_user_signup_data_form', $signup);
  // If the signup_data_form is required and user has not submitted form yet:
  if ($config['required'] && !$signup->signup_data_form_timestamp) {
    // Store flag to indicate we need to prompt user (handled in theme).
    $node->required_signup_data_form = 1;
    // If form is configured to include a skip button:
    if ($config['required_allow_skip']) {
      // Include the skip form:
      $node->content['skip_signup_data_form'] = drupal_get_form('dosomething_signup_user_skip_signup_data_form', $signup);
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function dosomething_campaign_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['pitch'] = array(
    'label' => t('Pitch page'),
    'custom settings' => TRUE,
  );
}
/*
 * Implements hook_entity_view_mode_alter().
 * Used to change the view_mode of the campaign nodes.
 */
function dosomething_campaign_entity_view_mode_alter(&$view_mode, $context) {
  // Is this a campaign node?
  if ($context['entity_type'] == 'node' && $context['entity']->type == 'campaign' && $view_mode == 'full') {
    // If anonymous user:
    if (!user_is_logged_in()) {
      // Display pitch view mode.
      $view_mode = 'pitch';
      return;
    }
    $node = $context['entity'];
    // If the current user is not on staff, and not signed up for the campaign, show the pitch page.
    if (!dosomething_user_is_staff()) {
      if (!dosomething_signup_exists($node->nid)) {
        $view_mode = 'pitch';
      }
    }
    // Is this a legacy campaign?
    if (module_exists('dosomething_legacy') && dosomething_legacy_check($node)) {
      if (dosomething_signup_exists($node->nid)) {
        // If the user is signed up redirect to old world campaign page.
        dosomething_legacy_goto($node->nid);
      }
    }
  }
}

/**
 * Returns array of nid's of recommended campaigns for $uid.
 *
 * First finds published staff pick campaigns that user has not signed up for.
 * Then finds published campaigns if no $tid is specified.
 *
 * If there are less than the limit needed, it finds published campaigns that have the
 * same primary cause as given $tid which the user has not signed up for.
 *
 *
 * @param int $tid
 *   Optional - The term $tid to query field_primary_cause for.
 *   This is used if there are less than $limit recommended staff picks for $uid.
 * @param int $uid
 *   Optional - The user $uid to recommend campaigns for.
 * @param int $limit
 *   Optional - The amount of campaigns to return, defaults to 3.
 *
 * @return array
 *  An array of node nid's.
 */
function dosomething_campaign_get_recommended_campaign_nids($tid = NULL, $uid = NULL, $limit = 3) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }
  // Get recommended staff picks first.
  $nids = dosomething_campaign_get_recommended_staff_pick_nids($uid, $limit);
  // If less than 3 staff picks:
  if (count($nids) < $limit) {
    // Do we want to return campaigns under a certain cause?
    if (!$tid) {
      // Grab some published campaigns.
      $nids = dosomething_campaign_get_recommended_published_nids($uid, $limit);
    }
    else {
      // Add recommended campaigns by term $tid.
      $tid_nids = dosomething_campaign_get_recommended_nids_by_term($tid, $uid, $limit);
      $nids = array_merge($nids, $tid_nids);
    }
  }
  // Return the limit of nids:
  return array_slice($nids, 0, $limit);
}

/**
 * Returns all staff pick campaigns.
 * @return array
 *  Array of nids and titles of all published/unpublished staff picks.
 */
function dosomething_campaign_get_staff_picks() {
 $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('type', 'campaign');
  $query->innerJoin('field_data_field_staff_pick', 'sp', 'sp.entity_id = n.nid');
  $query->condition('field_staff_pick_value' , 1);
  $results = $query->execute();

  foreach($results as $key => $result) {
    $staff_picks[$key]['nid'] = $result->nid;
    $staff_picks[$key]['title'] = $result->title;
  }
  if ($staff_picks) {
    return $staff_picks;
  }
  // If no staff picks, return null.
  return NULL;
}

/**
 * Returns an EntityFieldQuery of recommended published campaigns for $uid.
 *
 * @param int $uid
 *   The user $uid to recommend campaigns for.
 * @param int $limit
 *   The amount of campaigns to return.
 *
 * @return object
 *  An EntityFieldQuery of published campaigns that $uid has not signed up for.
 */
function _dosomething_campaign_get_recommended_base_query($uid, $limit) {
  // Store the nid's that the user has already signed up for.
  $signup_nids = dosomething_signup_get_signup_nids_by_uid($uid);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'campaign')
    ->propertyCondition('status', 1)
    ->range(0, $limit);
    if ($signup_nids) {
      $query->propertyCondition('nid', $signup_nids, 'NOT IN');
    }
  return $query;
}

/**
 * Helper function to execute a given node EntityFieldQuery and return $nid's.
 *
 * @param object $query
 *   An EntityFieldQuery of campaign nodes.
 *
 * @return array
 *  An array of the result node nid's.
 */
function _dosomething_campaign_get_recommended_query_nids($query) {
  try {
    $result = $query->execute();
    if (isset($result['node'])) {
      return array_keys($result['node']);
    }
  }
  catch (Exception $e) {
    watchdog('dosomething_campaign', $e, array(), WATCHDOG_ERROR);
  }

  // Return empty array if no result.
  return array();
}

/**
 * Returns array of nid's published campaigns.
 *
 * @param int $uid
 *   The user $uid to recommend campaigns for.
 * @param int $limit
 *   The amount of campaigns to return.
 *
 * @return object
 *  An EntityFieldQuery of published nids that $uid has not signed up for.
 */
function dosomething_campaign_get_recommended_published_nids($uid, $limit) {
  $query = _dosomething_campaign_get_recommended_base_query($uid, $limit);
  return _dosomething_campaign_get_recommended_query_nids($query);
}

/**
 * Returns array of nid's of recommended staff picks for $uid.
 *
 * @param int $uid
 *   The user $uid to recommend campaigns for.
 * @param int $limit
 *   The amount of campaigns to return.
 *
 * @return object
 *  An EntityFieldQuery of staff pick nids that $uid has not signed up for.
 */
function dosomething_campaign_get_recommended_staff_pick_nids($uid, $limit) {
  $query = _dosomething_campaign_get_recommended_base_query($uid, $limit);
  // Add field condition to only return staff picks.
  $query->fieldCondition('field_staff_pick', 'value', 1);
  return _dosomething_campaign_get_recommended_query_nids($query);
}

/**
 * Returns array of nid's of recommended campaigns for $uid with given $tid.
 *
 * @param int $tid
 *   The term $tid to query field_primary_cause for.
 * @param int $uid
 *   The user $uid to recommend campaigns for.
 * @param int $limit
 *   The amount of campaigns to return.
 *
 * @return object
 *  An EntityFieldQuery of staff pick nids that $uid has not signed up for.
 */
function dosomething_campaign_get_recommended_nids_by_term($tid, $uid, $limit) {
  $query = _dosomething_campaign_get_recommended_base_query($uid, $limit);
  // Add field condition to only campaigns with primary cause $tid.
  $query->fieldCondition('field_primary_cause', 'tid', $tid);
  return _dosomething_campaign_get_recommended_query_nids($query);
}
