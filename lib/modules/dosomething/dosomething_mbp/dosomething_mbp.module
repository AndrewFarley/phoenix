<?php
/**
 * @file
 * Code for the DoSomething specific Message Broker Producer (mbp)
 * functionality.
 */

/**
 * Implements hook_menu().
 */
function dosomething_mbp_menu() {

  $items['admin/config/dosomething/dosomething_mbp'] = array(
    'title' => 'DoSomething MBP',
    'description' => 'DoSomething MBP (Message Broker Producer) settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_mbp_config_form'),
    'access arguments' => array('administer message_broker_producer'),
    'file' => 'dosomething_mbp.admin.inc',
  );

  return $items;
}

/**
 * Common payload for campaign / group_campaign transactional producer requests.
 *
 * NOTE:
 * Any adjustments to the data before it becomes common campaign /
 * group_campaign payload should be done in this function.
 *
 * @param array $params
 *   Keyed array of data to build payload from.
 *
 * @return array
 *   $payload - Composed values ready to be sent as a message payload.
 */
function dosomething_mbp_get_common_campaign_payload(&$payload, $params) {
  $payload['subscribed'] = 1;
  $payload['event_id']   = $params['event_id'];

  // Signup Id.
  if (!empty($params['signup_id'])) {
    $payload['signup_id'] = $params['signup_id'];
  }

  if (isset($params['campaign_language'])) {
    $payload['campaign_language'] = $params['campaign_language'];
    $payload['campaign_country'] = $params['campaign_country'];
  }

  $payload['email_tags'][] = $params['event_id'];
  // Check for Mailchimp grouping_id+group_name:
  $mailchimp = !empty($params['mailchimp_group_name'])
            && !empty($params['mailchimp_grouping_id'])
            && !empty($params['mailchimp_list_id']);

  if ($mailchimp) {
    $payload['mailchimp_list_id']     = $params['mailchimp_list_id'];
    $payload['mailchimp_grouping_id'] = $params['mailchimp_grouping_id'];
    $payload['mailchimp_group_name']  = $params['mailchimp_group_name'];
  }
  $payload['merge_vars']['FNAME'] = $params['first_name'];
  $payload['merge_vars']['CAMPAIGN_TITLE'] = $params['campaign_title'];
  $payload['merge_vars']['CAMPAIGN_LINK'] = $params['campaign_link'];

  if (!empty($params['mobile'])) {
    $payload['mobile'] = $params['mobile'];
    if (!empty($params['mc_opt_in_path_id'])) {
      $payload['mc_opt_in_path_id'] = $params['mc_opt_in_path_id'];
    }
  }
}

/**
 * Define template name to use for transaction based on the event and the
 * affiliate code.
 *
 * @param string $event_name
 *   Example: "campaign_signup", "password_reset", etc
 * @param string $language
 *   (optional) Language setting used to define the message template name.
 *
 * @return string
 *   Name of Mandrill template to use for transactional message.
 */
function dosomething_mbp_get_template_name($event_name, $language = NULL) {
  if (isset($langauge)) {
    $country_code = dosomething_global_convert_language_to_country($language);
    if ($country_code == NULL) {
      $country_code = DOSOMETHING_GLOBAL_DEFAULT_COUNTRY_CODE;
    }
  }
  else {
    $country_code = dosomething_settings_get_affiliate_country_code();
  }

  // Convert from $origin use of "_" to "-" for template name
  $event_name = str_replace('_', '-', $event_name);
  return 'mb-' . $event_name . '-' . $country_code;
}
