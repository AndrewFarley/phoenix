<?php
/**
 * @file
 * Code for the DoSomething Zendesk module.
 */

/**
 * Implements hook_menu().
 */
function dosomething_zendesk_menu() {
  $items = array();
  $items['admin/config/services/dosomething_zendesk'] = array(
    'title' => 'DoSomething Zendesk settings',
    'description' => 'Manage Zendesk settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_zendesk_config_form'),
    'access arguments' => array('administer modules'),
    'file' => 'dosomething_zendesk.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function dosomething_zendesk_libraries_info() {
  $libraries['zendesk'] = array(
    'name' => 'Zendesk',
    'path' => 'vendor',
    'files' => array(
      'php' => array(
        'autoload.php'
      ),
    ),
    'version' => 1
  );
  return $libraries;
}

/**
 * Returns a Zendesk Client object with auth vars.
 */
function dosomething_zendesk_get_client() {
  $library = libraries_load('zendesk');
  if (empty($library['loaded'])) {
    return FALSE;
  }
  $subdomain = variable_get('dosomething_zendesk_subdomain');
  $username = variable_get('dosomething_zendesk_username');
  $token = variable_get('dosomething_zendesk_token');
  $client = new Zendesk\API\Client($subdomain, $username);
  $client->setAuth('token', $token);
  return $client;
}

/**
 * Form constructor for submitting a Zendesk ticket.
 */
function dosomething_zendesk_form($form, &$form_state)  {
  $form['body'] = array(
    '#type' => 'textarea',
    '#required' => TRUE,
    '#title' => t('Your Question'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#prefix' => '<div class="form-actions">',
    '#suffix' => '</div>',
    '#attributes' => array('class' => array('btn', 'large')),
  );

  return $form;
}

/**
 * Submit callback for dosomething_zendesk_form().
 */
function dosomething_zendesk_form_submit($form, &$form_state) {
  global $user;
  $values = $form_state['values'];
  $values['email'] = $user->mail;
  $values['subject'] = t('Question about') . ' ' . drupal_get_title();
  // Attempt to submit a ticket via Zendesk API.
  if (dosomething_zendesk_create_ticket($values)) {
    $msg = t("Thanks for submitting your question.") . ' ';
    $msg .= t("We'll send a response to") . ' ';
    $msg .= $values['email'] . ' ' . t("shortly.");
    $msg_type = 'status';
  }
  else {
    $msg = t("Sorry, there was an error with your request. Please try again.");
    $msg_type = 'warning';
  }
  drupal_set_message($msg, $msg_type);
}

/**
 * Submits a ticket to Zendesk via Zendesk API request.
 *
 * @param array $values
 *   Values to pass to the Zendesk Tickets API. For expected format,
 *   @see dosomething_zendesk_get_ticket_array()
 *
 * @return bool
 *   Whether or not API request was successful.
 */
function dosomething_zendesk_create_ticket($values) {
  global $user;
  // Get expected format for a create Ticket request.
  $ticket = dosomething_zendesk_get_ticket_array($values);
  if ($ticket && $client = dosomething_zendesk_get_client()) {
    try {
      // Make sure user exists as a Zendesk user (required to create Ticket).
      if (dosomething_zendesk_verify_zendesk_user($user, $client)) {
        // Submit API request to create Zendesk ticket.
        $client->tickets()->create($ticket);
        return TRUE;
      }
    }
    catch (Exception $e) {
      watchdog('dosomething_zendesk', $e, array(), WATCHDOG_ERROR);
    }
  }
  return FALSE;
}

/**
 * Prepares a Zendesk ticket array with expected keys.
 *
 * @param array $values
 *   Values to pass to the Zendesk Tickets API.
 *   http://developer.zendesk.com/documentation/rest_api/tickets.html
 *   Expected keys:
 *     - email: The email of user submitting ticket
 *     - subject: Subject of the ticket.
 *     - body: Body of the ticket.
 *
 * @return mixed
 *   FALSE if an expected key is not persent, otherwise an array with
 *   expected keys and values for submitting to Zendesk Tickets API.
 *
 */
function dosomething_zendesk_get_ticket_array($values) {
  // List expected array keys.
  $keys = array('email', 'subject', 'body');
  // Loop through $values to make sure all keys are present.
  foreach ($keys as $key) {
    if (!isset($values[$key])) {
      // Return FALSE if key is not present.
      return FALSE;
    }
  }
  // Return expected format for Ticket creation.
  return array(
    'requester' => array(
      'email' => $values['email'],
    ),
    'subject' => $values['subject'],
    'comment' => array(
      'body' => $values['body'],
    ),
    'priority' => 'normal',
  );
}

/**
 * Verifies that given user exists as zendesk user.
 * 
 * If a zendesk user doesn't exist for account, creates one.
 *
 * @param object $user
 *   The user object to verify.
 *
 * @return mixed
 *   An API response, or FALSE if exception was thrown.
 */
function dosomething_zendesk_verify_zendesk_user($account, $client = NULL) {
  if ($client == NULL) {
    $client = dosomething_zendesk_get_client();
  }
  try {
    $search = $client->search(array(
      'query' => "type:user email:{$account->mail}",
    ));
    // If a zendesk user was not found:
    if (empty($search->results)) {
      // Create a zendesk user.
      return dosomething_zendesk_create_zendesk_user($account, $client);
    }
    return $search->results;
  }
  catch (Exception $e) {
    watchdog('dosomething_zendesk', $e, array(), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Creates a zendesk user for a given user.
 *
 * @param object $user
 *   The user object to create a zendesk user for.
 *
 * @return mixed
 *   An API response, or FALSE if exception was thrown.
 */
function dosomething_zendesk_create_zendesk_user($account, $client = NULL) {
  if ($client == NULL) {
    $client = dosomething_zendesk_get_client();
  }  
  $first_name = dosomething_user_get_field('field_first_name', $account);
  // Use the email address as the name if there's no first name available.
  if (!$first_name) {
    $first_name = $account->mail;
  }
  $new_user = array(
    'email' => $account->mail,
    'name' => $first_name,
  );
  try {
    // Send API request to create new user.
    return $client->users()->create($new_user);
  }
  catch (Exception $e) {
    watchdog('dosomething_zendesk', $e, array(), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Retrieves all non-deleted Zendesk groups from the API.
 *
 * @return mixed
 *   A multi-dimensional array, or FALSE if exception was thrown.
 */
function dosomething_zendesk_get_zendesk_groups() {
  $groups = array();
  try {
    $client = dosomething_zendesk_get_client();
    $result = $client->groups()->findAll();
    if (!empty($result->groups)) {
      foreach ($result->groups as $group) {
        if (!$group->deleted) {
          $groups[] = array(
            'id' => $group->id,
            'name' => $group->name,
          );
        }
      }
    }
    return $groups;
  }
  catch (Exception $e) {
    watchdog('dosomething_zendesk', $e, array(), WATCHDOG_ERROR);
    return FALSE;
  }
}
